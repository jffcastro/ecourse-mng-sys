@startuml
'http://plantuml.com/skinparam.html
skinparam monochrome true
skinparam packageStyle rect
skinparam defaultFontName FG Virgil
skinparam shadowing false

autonumber

actor Student as Actor
participant TakeAutoExamUI as UI <<presentation>>
participant CreateUpdateAutoExamUI as UI2 <<presentation>>
participant CommonTakeExamUI as CommonTakeExamUI <<presentation>>
control CommonTakeExamController as CommonTakeExamController <<application>>
control CommonTakeExamService as CommonTakeExamService <<application>>
control TakeExamEvalVisitor as TakeExamEvalVisitor <<visitor>>
entity Exam as Exam <<domain>>
entity Section as Section <<domain>>
entity Question as Question <<domain>>


activate Actor
    Actor -> UI : wants to take an automatic exam
    activate UI
    UI-> UI2 : createAutoExam()
    note right of UI2: calls US 2008
    activate UI2
    UI2 --> UI : exam
    deactivate UI2
    alt if exam is not null
        UI -> CommonTakeExamUI : takeExam(exam)
    deactivate UI
    activate CommonTakeExamUI
        CommonTakeExamUI --> Actor : asks if student wants to do the\n exam manually or import a file
        Actor -> CommonTakeExamUI : selects option
        alt if option is manual
            CommonTakeExamUI -> Exam : sections()
            activate Exam
                Exam --> CommonTakeExamUI : sections
            deactivate Exam
            loop for each section in section list
                CommonTakeExamUI --> Actor : shows section information
                CommonTakeExamUI -> Section : questions()
                activate Section
                    Section --> CommonTakeExamUI : questions
                deactivate Section
                loop for each question in question list
                    CommonTakeExamUI --> Actor : shows question and asks for student to answer
                    Actor -> CommonTakeExamUI : answers question
                    CommonTakeExamUI -> CommonTakeExamController : correctQuestion(question, studentAnswer)
                    activate CommonTakeExamController
                        CommonTakeExamController -> CommonTakeExamService : correctQuestion(question, studentAnswer)
                        activate CommonTakeExamService
                            CommonTakeExamService -> Question : answer()
                            activate Question
                                Question --> CommonTakeExamService : answer
                            deactivate Question
                            CommonTakeExamService --> CommonTakeExamController : return if question is correct or not (true or false)
                        deactivate CommonTakeExamService
                        CommonTakeExamController --> CommonTakeExamUI : return if question is correct or not (true or false)
                    deactivate CommonTakeExamController
                    alt if question is correct
                        CommonTakeExamUI -> Question : quotation()
                        activate Question
                            Question --> CommonTakeExamUI : quotation
                        deactivate Question
                        CommonTakeExamUI -> CommonTakeExamUI : grade+= questionQuotation
                    end
                    CommonTakeExamUI --> Actor : inform about exam finished
                end
            end
        else if option is by file
            CommonTakeExamUI <-- Actor : shows exam sections and questions
            CommonTakeExamUI --> Actor : asks for file path
            Actor -> CommonTakeExamUI : inserts file path
            CommonTakeExamUI -> CommonTakeExamController : importFile(path)
            activate CommonTakeExamController
                CommonTakeExamController -> CommonTakeExamService : importFile()
                activate CommonTakeExamService
                    CommonTakeExamService --> CommonTakeExamController : file imported
                deactivate CommonTakeExamService
                CommonTakeExamController --> CommonTakeExamUI : file imported
            deactivate CommonTakeExamController
            alt if file is not null
                CommonTakeExamUI -> CommonTakeExamController : correctExamByFile(exam,file)
                activate CommonTakeExamController
                    CommonTakeExamController -> CommonTakeExamService : correctExamByFile(exam,file)
                    activate CommonTakeExamService
                        CommonTakeExamService -> TakeExamEvalVisitor : correctExam(exam, file)
                        activate TakeExamEvalVisitor
                            note left of TakeExamEvalVisitor : this part is related to ANTLR
                            TakeExamEvalVisitor --> CommonTakeExamService : student grade
                        deactivate TakeExamEvalVisitor
                        CommonTakeExamService --> CommonTakeExamController : student grade
                    deactivate CommonTakeExamService
                    CommonTakeExamController --> CommonTakeExamUI : student grade
                deactivate CommonTakeExamController
                CommonTakeExamUI --> Actor : inform about exam finished
            else if file is null
                CommonTakeExamUI --> Actor : informs about file not valid
            end
        end
        CommonTakeExamUI --> UI : student grade
    deactivate CommonTakeExamUI
    activate UI
        UI --> Actor : shows feedback
    deactivate UI
    end
deactivate Actor

@enduml