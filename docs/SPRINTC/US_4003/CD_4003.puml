@startuml

class UserMeetingInvitationUI <<UI>> {
}

class UserMeetingInvitationController <<Controller>> {
    + List<MeetingInvitation>: getMeetingInvitationList(user)
    - void: saveMeetingInvitation
    - boolean : checkMeeting(SystemUser user, Date dateOfMeeting, LocalTime startTime, LocalTime endTime)
}

class MeetingInvitationRepository <<Repository>> {
    + List<MeetingInvitation>: getMeetingInvitationList(user)
    - void : save(meetingInvitation)
}


class Meeting <<Aggregate Root>>{
    String: description
    LocalTime: startTime
    LocalTime: endTime
    DateInterval: timePeriod
    Date: date
    User: organizer
    List<MeetingInvitation>: meetingInvitationList
}

class CheckIfUserIsFreeService {
  + CheckIfUserIsFreeService():
  - checkIfDatesCoincide(Date, LocalTime, LocalTime, List<CourseClass>, List<Meeting>, List<MeetingInvitation>): boolean
  - isTimeOverlap(LocalTime, LocalTime, LocalTime, LocalTime): boolean
  + checkIfUserIsNotFree(SystemUser, Date, LocalTime, LocalTime): boolean
}

class MeetingInvitation <<Entity>>{
    int: inviteID
    Meeting: meeting

    - void : setMeetingInvitationStatus(status)
}

enum MeetingInvitationStatus {
    PENDING
    ACCEPTED
    DECLINED
    CANCELED
}

enum MeetingStatus{
    CREATED
    CANCELED
}

Meeting "1" -> "*" MeetingInvitation : has >
MeetingInvitation "1" -> "1" MeetingInvitationStatus : has >
Meeting "1" -left-> "1" MeetingStatus : has >

UserMeetingInvitationController ..> CheckIfUserIsFreeService

UserMeetingInvitationUI ..> UserMeetingInvitationController
UserMeetingInvitationUI ..> Meeting
UserMeetingInvitationUI ..> MeetingInvitation
UserMeetingInvitationController ..> MeetingInvitationRepository

UserMeetingInvitationController ..> MeetingInvitation

MeetingInvitationRepository --> MeetingInvitation : saves >

@enduml